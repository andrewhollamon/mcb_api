package error

import (
	"github.com/google/uuid"
	"log"
	"net/http"

	"github.com/gin-gonic/gin"
)

// NOTE: The errors code was generated by claude code, and is still being worked through for changes

func ErrorHandlerMiddleware() gin.HandlerFunc {
	return func(c *gin.Context) {
		defer HandlePanic(c)

		c.Next()

		if len(c.Errors) > 0 {
			err := c.Errors.Last()

			if apiErr, ok := err.Err.(APIError); ok {
				apiErr.Respond(c)
				return
			}

			internalErr := NewInternalError("Internal server error", err.Err)
			if traceID := c.GetHeader("X-Trace-ID"); traceID != "" {
				internalErr = internalErr.WithTrace(traceID)
			}

			log.Printf("Unhandled error: %v", err.Err)
			internalErr.Respond(c)
		}
	}
}

func TraceIDMiddleware() gin.HandlerFunc {
	return func(c *gin.Context) {
		traceID := c.GetHeader("X-Trace-ID")
		if traceID == "" {
			if uuid, err := uuid.NewV7(); err == nil {
				traceID = uuid.String()
				c.Header("X-Trace-ID", traceID)
			}
		}
		c.Set("trace_id", traceID)
		c.Next()
	}
}

func CORSMiddleware() gin.HandlerFunc {
	return func(c *gin.Context) {
		c.Header("Access-Control-Allow-Origin", "*")
		c.Header("Access-Control-Allow-Methods", "GET, POST, PUT, DELETE, OPTIONS")
		c.Header("Access-Control-Allow-Headers", "Content-Type, Authorization, X-Trace-ID, X-Request-ID")
		c.Header("Access-Control-Expose-Headers", "X-Trace-ID")

		if c.Request.Method == "OPTIONS" {
			c.AbortWithStatus(http.StatusNoContent)
			return
		}

		c.Next()
	}
}
